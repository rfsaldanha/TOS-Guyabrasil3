package routines;

import static net.disy.talend.spatial.lib.geometry.srs.DefaultSpatialReferenceSystemFactory.getInstance;

import java.util.Collections;

import org.opengis.geometry.MismatchedDimensionException;
import org.opengis.referencing.FactoryException;
import org.opengis.referencing.operation.TransformException;

import com.vividsolutions.jts.geom.IntersectionMatrix;

import net.disy.talend.spatial.lib.executor.factory.ProjectComponentExecutorFactory;
import net.disy.talend.spatial.lib.geometry.DGeometry;
import net.disy.talend.spatial.lib.geometry.GeometryUtils;

public class DGeometryOperation {
  public enum BufferEndCapStyle {

    /**
     * Specifies a round line buffer end cap style.
     */
    CAP_ROUND(1),

    /**
     * Specifies a flat line buffer end cap style.
     */
    CAP_FLAT(2),

    /**
     * Specifies a square line buffer end cap style.
     */
    CAP_SQUARE(3);

    private int endCapStyle;

    private BufferEndCapStyle(int endCapStyle) {
      this.endCapStyle = endCapStyle;
    }

    public int getEndCapStyle() {
      return endCapStyle;
    }
  }

  /**
   * Returns the centroid of the geometry.
   *
   * {talendTypes} DGeometry
   *
   * {Category} DGeometryOperation
   *
   * {param} DGeometry(null) geometry: Geometry
   *
   * {example} CENTROID(geometry)
   *
   */
  public static DGeometry CENTROID(DGeometry geometry) {
    return geometry != null ? geometry.getCentroid() : null;
  }

  /**
   * Returns the envelope (bounding box) of the geometry.
   *
   * {talendTypes} DGeometry
   *
   * {Category} DGeometryOperation
   *
   * {param} DGeometry(null) geometry: Geometry
   *
   * {example} ENVELOPE(geometry)
   *
   */
  public static DGeometry ENVELOPE(DGeometry geometry) {
    return geometry != null ? geometry.getEnvelope() : null;
  }

  /**
   * Computes and returns the convex hull of the geometry - the smallest convex polygon that contains all the points of the input geometry.
   *
   * {talendTypes} DGeometry
   *
   * {Category} DGeometryOperation
   *
   * {param} DGeometry(null) geometry: Geometry
   *
   * {example} CONVEX_HULL(geometry)
   *
   */
  public static DGeometry CONVEX_HULL(DGeometry geometry) {
    return geometry != null ? geometry.convexHull() : null;
  }

  /**
   * Returns the buffer of the input geometry.
   *
   * {talendTypes} DGeometry
   *
   * {Category} DGeometryOperation
   *
   * {param} DGeometry(null) geometry: the geometry to buffer
   *
   * {param} double(10) distance: the buffer distance
   *
   * {param} int(8) quadrantSegments: the number of segments used to approximate a quarter circle
   *
   * {param} DGeometryOperation.BufferEndCapStyle(DGeometryOperation.BufferEndCapStyle.CAP_ROUND) endCapStyle: the end cap style to use
   *
   * {example} BUFFER(geometry, 10, 8, DGeometryOperation.BufferEndCapStyle.CAP_ROUND)
   *
   */
  public static DGeometry BUFFER(
      DGeometry geometry,
      double distance,
      int quadrantSegments,
      BufferEndCapStyle endCapStyle) {
    return geometry != null ? geometry.buffer(
        distance,
        quadrantSegments,
        endCapStyle.getEndCapStyle()) : null;
  }

  /**
   * Projects the geometry from one coordinate system to another.
   *
   * {talendTypes} DGeometry
   *
   * {Category} DGeometryOperation
   *
   * {param} DGeometry(null) geometry: the geometry to project
   *
   * {param} int(4326) sourceSrid: source SRID (EPSG)
   *
   * {param} int(31467) targetSrid: target SRID (EPSG)
   *
   * {param} boolean(false) lenient: give true if the math transform should be created even when there is no information available for a datum shift.
   *
   * {example} PROJECT(geometry, 4326, 31467, DGeometryOperation.BufferEndCapStyle.CAP_ROUND)
   *
   */
  @SuppressWarnings("nls")
  public static DGeometry PROJECT(
      DGeometry geometry,
      int sourceSrid,
      int targetSrid,
      boolean lenient) throws MismatchedDimensionException, TransformException, FactoryException {
    if (geometry == null) {
      return null;
    }
    return new ProjectComponentExecutorFactory().create(
        "",
        Collections.emptyMap(),
        sourceSrid,
        targetSrid,
        lenient).execute(geometry);
  }

  /**
   * Reads a Well-Known Text representation of a geometry and returns DGeometry object.
   *
   * {talendTypes} DGeometry
   *
   * {Category} DGeometryOperation
   *
   * {param} string("POINT (30 10)") wkt: Well-Known Text
   *
   * {param} int(4326) srid: the SRID to use
   *
   * {example} FROM_WKT("POINT (30 10)", 4326)
   *
   */
  public static DGeometry FROM_WKT(String wkt, int srid) {
    return GeometryUtils.geometryFromWkt(wkt, getInstance().create(srid));
  }

  /**
   * Returns the Well-known Text representation of this geometry.
   *
   * {talendTypes} String
   *
   * {Category} DGeometryOperation
   *
   * {param} DGeometry(null) geometry: Geometry
   *
   * {example} TO_WKT(geometry)
   *
   */
  public static String TO_WKT(DGeometry geometry) {
    return geometry != null ? geometry.toWkt() : null;
  }

  /**
   * Creates a point geometry from the given x, y coordinates with the given spatial reference.
   *
   * {talendTypes} DGeometry
   *
   * {Category} DGeometryOperation
   *
   * {param} double(0.0) x: the x-value
   *
   * {param} double(0.0) y: the y-value
   *
   * {param} int(4326) srid: the SRID to use
   *
   * {example} CREATE_POINT_FROM_COORDINATES(x, y, srid)
   *
   */
  public static DGeometry CREATE_POINT_FROM_COORDINATES(double x, double y, int srid) {
    return GeometryUtils.create2DPoint(x, y, getInstance().create(srid));
  }

  /**
   * Creates a point geometry from the given x, y coordinates with the given spatial reference.
   *
   * {talendTypes} DGeometry
   *
   * {Category} DGeometryOperation
   *
   * {param} double(0.0) x: the x-value
   *
   * {param} double(0.0) y: the y-value
   *
   * {param} double(0.0) z: the z-value
   *
   * {param} int(4326) srid: the SRID to use
   *
   * {example} CREATE_3D_POINT_FROM_COORDINATES(x, y, z, srid)
   *
   */
  public static DGeometry CREATE_3D_POINT_FROM_COORDINATES(double x, double y, double z, int srid) {
    return GeometryUtils.create3DPoint(x, y, z, getInstance().create(srid));
  }

  /**
   * Returns the minimum distance between one geometry and another.
   *
   * {talendTypes} double | Double
   *
   * {Category} DGeometryOperation
   *
   * {param} DGeometry(null) geometry1: the first geometry
   *
   * {param} DGeometry(null) geometry2: the second geometry
   *
   * {example} DISTANCE(geometry1, geometry2)
   *
   */
  public static double DISTANCE(DGeometry geometry1, DGeometry geometry2) {
    return geometry1 != null && geometry2 != null ? geometry1.distance(geometry2) : 0;
  }

  /**
   * Returns the number of geometries in a geometry collection (or 1, if the geometry is not a collection).
   *
   * {talendTypes} int | Integer
   *
   * {Category} DGeometryOperation
   *
   * {param} DGeometry(null) geometry: the geometry
   *
   * {example} NUM_GEOMETRIES(geometry)
   *
   */
  public static int NUM_GEOMETRIES(DGeometry geometry) {
    return geometry != null ? geometry.getNumGeometries() : 0;
  }

  /**
   * Returns the count of geometry vertices.
   *
   * {talendTypes} int | Integer
   *
   * {Category} DGeometryOperation
   *
   * {param} DGeometry(null) geometry: the geometry
   *
   * {example} NUM_POINTS(geometry)
   *
   */
  public static int NUM_POINTS(DGeometry geometry) {
    return geometry != null ? geometry.getNumPoints() : 0;
  }

  /**
   * Returns the ID of the Spatial Reference System used by the geometry.
   *
   * {talendTypes} int | Integer
   *
   * {Category} DGeometryOperation
   *
   * {param} DGeometry(null) geometry: the geometry
   *
   * {example} SRID(geometry)
   *
   */
  public static int SRID(DGeometry geometry) {
    return geometry != null ? geometry.getSpatialReferenceSystem().getCode() : 0;
  }

  /**
   * Returns the name of JTS Geometry's actual class.
   *
   * {talendTypes} String
   *
   * {Category} DGeometryOperation
   *
   * {param} DGeometry(null) geometry: the geometry
   *
   * {example} GEOMETRY_TYPE(geometry)
   *
   */
  public static String GEOMETRY_TYPE(DGeometry geometry) {
    return geometry != null ? geometry.getGeometryType() : null;
  }

  /**
   * Returns an element geometry from a geometry collection (or the given geometry, if the geometry is not a collection).
   *
   * {talendTypes} DGeometry
   *
   * {Category} DGeometryOperation
   *
   * {param} DGeometry(null) geometry: the geometry
   *
   * {param} int(1) n: the index of the geometry element
   *
   * {example} GEOMETRY_N(geometry)
   *
   */
  public static DGeometry GEOMETRY_N(DGeometry geometry, int n) {
    return geometry != null ? geometry.getGeometryN(n) : null;
  }

  /**
   * Returns the boundary, or an empty geometry of appropriate dimension if this geometry is empty.
   *
   * {talendTypes} DGeometry
   *
   * {Category} DGeometryOperation
   *
   * {param} DGeometry(null) geometry: the geometry
   *
   * {example} BOUNDARY(geometry)
   *
   */
  public static DGeometry BOUNDARY(DGeometry geometry) {
    return geometry != null ? geometry.getBoundary() : null;
  }

  /**
   * Returns the point of the first geometry, which is the nearest to the second geometry.
   *
   * {talendTypes} DGeometry
   *
   * {Category} DGeometryOperation
   *
   * {param} DGeometry(null) geometry1: the first geometry
   *
   * {param} DGeometry(null) geometry2: the second geometry
   *
   * {example} NEAREST_POINT(geometry1, geometry2)
   *
   */
  public static DGeometry NEAREST_POINT(DGeometry geometry1, DGeometry geometry2) {
    return geometry1 != null && geometry2 != null ? GeometryUtils
        .nearestPoint(geometry1, geometry2) : null;
  }

  /**
   * Computes the intersection of two geometries - a geometry representing the point-set which is common to both given geometries.
   *
   * {talendTypes} DGeometry
   *
   * {Category} DGeometryOperation
   *
   * {param} DGeometry(null) geometry1: the first geometry
   *
   * {param} DGeometry(null) geometry2: the second geometry
   *
   * {example} INTERSECTION(geometry1, geometry2)
   *
   */
  public static DGeometry INTERSECTION(DGeometry geometry1, DGeometry geometry2) {
    return geometry1 != null && geometry2 != null ? geometry1.intersection(geometry2) : null;
  }

  /**
   * Computes a union of two geometries - a geometry representing the point-set
   * which is contained in both first geometry and the second geometry.
   *
   * {talendTypes} DGeometry
   *
   * {Category} DGeometryOperation
   *
   * {param} DGeometry(null) geometry1: the first geometry
   *
   * {param} DGeometry(null) geometry2: the second geometry
   *
   * {example} UNION(geometry1, geometry2)
   *
   */
  public static DGeometry UNION(DGeometry geometry1, DGeometry geometry2) {
    if (geometry1 != null && geometry2 != null) {
      return geometry1.union(geometry2);
    }
    return geometry1 != null ? geometry1 : geometry2;
  }

  /**
   * Computes a topological difference of two geometries - a geometry representing the closure of the point-set
   * of the points contained in first geometry that are not contained in the second geometry.
   *
   * {talendTypes} DGeometry
   *
   * {Category} DGeometryOperation
   *
   * {param} DGeometry(null) geometry1: the first geometry
   *
   * {param} DGeometry(null) geometry2: the second geometry
   *
   * {example} DIFFERENCE(geometry1, geometry2)
   *
   */
  public static DGeometry DIFFERENCE(DGeometry geometry1, DGeometry geometry2) {
    if (geometry1 != null && geometry2 != null) {
      return geometry1.difference(geometry2);
    }
    return geometry1;
  }

  /**
   * Returns the DE-9IM intersection matrix for the two geometries.
   * The pattern is a 9-character string, with symbols drawn from the following set:
   *  <UL>
   *    <LI> 0 (dimension 0)
   *    <LI> 1 (dimension 1)
   *    <LI> 2 (dimension 2)
   *    <LI> T ( matches 0, 1 or 2)
   *    <LI> F ( matches FALSE)
   *    <LI> * ( matches any value)
   *  </UL>
   * For more information on the DE-9IM, see the "OpenGIS Simple Features Specification".
   *
   * {talendTypes} String
   *
   * {Category} DGeometryOperation
   *
   * {param} DGeometry(null) geometry1: the first geometry
   *
   * {param} DGeometry(null) geometry2: the second geometry
   *
   * {example} RELATE(geometry1, geometry2)
   *
   */
  public static String RELATE(DGeometry geometry1, DGeometry geometry2) {
    return geometry1 != null && geometry2 != null
        ? geometry1.relate(geometry2).toString()
        : new IntersectionMatrix().toString();
  }

}
